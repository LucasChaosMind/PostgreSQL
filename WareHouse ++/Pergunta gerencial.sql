/* *	Lucas C. Bresolino & Lúcio Sganzerla *  *	Efetuamos algumas alterações em tipagem de dados de colunas, sendo assim, segue também o script para geração do warehouse. * */drop schema if exists warehouse;create schema warehouse;create table if not exists warehouse.dim_produtos (    id                   serial constraint prd_alimentos_pk primary key,    descricao            varchar(255),    categoria            varchar(255));create table if not exists warehouse.dim_enderecos (    id               serial constraint endereco_pk primary key,    nome_rua         varchar(255) not null,    bairro           varchar(255) not null,    nome_cidade      varchar(255) not null,    nome_estado      varchar(255) not null);create table if not exists warehouse.dim_lojas (    id                 serial constraint lojas_pk primary key,    cod_endereco       integer     not null constraint lojas_endereco_fk references warehouse.dim_enderecos,    matriz             integer,    cnpj_loja          varchar(20) not null);create table if not exists warehouse.dim_fornecedores (    id  serial constraint fornecedores_pk primary key,    cod_fornecedor integer not null,    razao_social   varchar(255),    nome_fantasia  varchar(255),    cod_endereco   integer constraint fornecedores_endereco_fk references warehouse.dim_enderecos);create table if not exists warehouse.dim_funcionarios (    id                  serial constraint funcionarios_pk primary key,    cod_funcionario     integer        not null,    cod_loja            integer        not null constraint funcionarios_loja_fk references warehouse.dim_lojas,    nome_completo       varchar(255)   not null);create table if not exists warehouse.fato_vendas (    id              serial constraint vendas_pk primary key,    cod_produto     integer        not null constraint vendas_produto_fk references warehouse.dim_produtos,    cod_funcionario integer        not null constraint vendas_funcionario_fk references warehouse.dim_funcionarios,    data            varchar(8)     not null,    quantidade      numeric(10)    not null,    valor           numeric(12, 4) not null);create table if not exists warehouse.fato_compras (    id             serial constraint compras_pk primary key,    cod_produto    integer        not null constraint compras_produto_fk references warehouse.dim_produtos,    cod_fornecedor integer        not null constraint compras_fornecedor_fk references warehouse.dim_fornecedores,    data           varchar(8)     not null,    quantidade     numeric(10)    not null,    valor          numeric(12, 4) not null);/* CRIAÇÃO DA FUNÇÃO DE SEGURANÇA DO WAREHOUSE PARA EVITAR EDIÇÃO OU REMOÇÃO DE DADOS */create or replace function warehouse.func_block_update_and_delete() returns trigger as $$begin    IF (TG_OP = 'UPDATE' or TG_OP = 'DELETE') THEN        raise exception 'Ação não permitida em um warehouse!';    END IF;end $$ language plpgsql;create trigger tgaud_block_edition_dim_enderecos after update or delete on warehouse.dim_enderecos for each row execute function warehouse.func_block_update_and_delete();create trigger tgaud_block_edition_dim_fornecedores after update or delete on warehouse.dim_fornecedores for each row execute function warehouse.func_block_update_and_delete();create trigger tgaud_block_edition_dim_funcionarios after update or delete on warehouse.dim_funcionarios for each row execute function warehouse.func_block_update_and_delete();create trigger tgaud_block_edition_dim_lojas after update or delete on warehouse.dim_lojas for each row execute function warehouse.func_block_update_and_delete();create trigger tgaud_block_edition_dim_produtos after update or delete on warehouse.dim_produtos for each row execute function warehouse.func_block_update_and_delete();create trigger tgaud_block_edition_fato_compras after update or delete on warehouse.fato_compras for each row execute function warehouse.func_block_update_and_delete();create trigger tgaud_block_edition_fato_vendas after update or delete on warehouse.fato_vendas for each row execute function warehouse.func_block_update_and_delete();/*	ETLs*/create or replace function warehouse.insert_dim_enderecos() returns void as$$BEGIN    insert into warehouse.dim_enderecos (nome_rua, bairro, nome_cidade, nome_estado)select enderecos.tb003_nome_rua, enderecos.tb003_bairro, c.tb002_nome_cidade, uf.tb001_nome_estado    from varejo.tb003_enderecos enderecos left join         varejo.tb002_cidades c on c.tb002_cod_cidade = enderecos.tb002_cod_cidade left join         varejo.tb001_uf uf on uf.tb001_sigla_uf = enderecos.tb001_sigla_uf    where (select de.id from warehouse.dim_enderecos de           where de.nome_rua = enderecos.tb003_nome_rua             and de.bairro = enderecos.tb003_bairro             and de.nome_cidade = c.tb002_nome_cidade             and de.nome_estado = uf.tb001_nome_estado) is null    group by enderecos.tb003_nome_rua, enderecos.tb003_bairro, c.tb002_nome_cidade, uf.tb001_nome_estado;END;$$ LANGUAGE plpgsql;create or replace function warehouse.insert_dim_produtos() returns void as$$BEGIN    insert into warehouse.dim_produtos (descricao, categoria)    select produto.tb012_descricao, cat.tb013_descricao    from varejo.tb012_produtos produto             left join varejo.tb013_categorias cat on produto.tb013_cod_categoria = cat.tb013_cod_categoria    where (select produto.tb012_cod_produto           from warehouse.dim_produtos dp           where dp.descricao = produto.tb012_descricao             and dp.categoria = cat.tb013_descricao) is null    group by produto.tb012_cod_produto, produto.tb012_descricao, cat.tb013_descricao;END;$$ LANGUAGE plpgsql;create or replace function warehouse.insert_dim_lojas() returns void as$$BEGIN    insert into warehouse.dim_lojas (cod_endereco, matriz, cnpj_loja)    select (select id            from warehouse.dim_enderecos ends            where ends.bairro = enderecos.tb003_bairro              and ends.nome_rua = enderecos.tb003_nome_rua              and ends.nome_cidade = cidades.tb002_nome_cidade              and ends.nome_estado = uf.tb001_nome_estado            order by id desc            limit 1) as cod_endereco,           loja.tb004_matriz,           loja.tb004_cnpj_loja    from varejo.tb004_lojas loja             left join varejo.tb003_enderecos enderecos on enderecos.tb003_cod_endereco = loja.tb003_cod_endereco             left join varejo.tb002_cidades cidades on cidades.tb002_cod_cidade = enderecos.tb002_cod_cidade             left join varejo.tb001_uf uf on uf.tb001_sigla_uf = enderecos.tb001_sigla_uf    where (select dloja.id           from warehouse.dim_lojas dloja           where dloja.cod_endereco = (select ends.id                                       from warehouse.dim_enderecos ends                                       where ends.bairro = enderecos.tb003_bairro                                         and ends.nome_rua = enderecos.tb003_nome_rua                                         and ends.nome_cidade = cidades.tb002_nome_cidade                                         and ends.nome_estado = uf.tb001_nome_estado                                       order by id desc                                       limit 1)             and dloja.cnpj_loja = loja.tb004_cnpj_loja) is null;END;$$ LANGUAGE plpgsql;create or replace function warehouse.insert_dim_fornecedores() returns void as$$BEGIN    insert into warehouse.dim_fornecedores (cod_fornecedor, razao_social, nome_fantasia, cod_endereco)    select func.tb017_cod_fornecedor,           func.tb017_razao_social,           func.tb017_nome_fantasia,           (select ends.id            from warehouse.dim_enderecos ends            where ends.bairro = enderecos.tb003_bairro              and ends.nome_rua = enderecos.tb003_nome_rua              and ends.nome_cidade = cidades.tb002_nome_cidade              and ends.nome_estado = uf.tb001_nome_estado            order by ends.id desc            limit 1) as cod_endereco    from varejo.tb017_fornecedores func             left join varejo.tb003_enderecos enderecos on enderecos.tb003_cod_endereco = func.tb003_cod_endereco             left join varejo.tb002_cidades cidades on cidades.tb002_cod_cidade = enderecos.tb002_cod_cidade             left join varejo.tb001_uf uf on uf.tb001_sigla_uf = enderecos.tb001_sigla_uf    where (select forn.id           from warehouse.dim_fornecedores forn           where forn.cod_endereco = (select ends.id                            from warehouse.dim_enderecos ends                            where ends.bairro = enderecos.tb003_bairro                              and ends.nome_rua = enderecos.tb003_nome_rua                              and ends.nome_cidade = cidades.tb002_nome_cidade                              and ends.nome_estado = uf.tb001_nome_estado                            order by ends.id desc                            limit 1)        and forn.razao_social = func.tb017_razao_social and forn.nome_fantasia = func.tb017_nome_fantasia) is null;END;$$ LANGUAGE plpgsql;create or replace function warehouse.insert_dim_funcionarios() returns void as$$BEGIN    insert into warehouse.dim_funcionarios (cod_funcionario, cod_loja, nome_completo)    select func.tb005_matricula,           (select loja.id            from warehouse.dim_lojas loja            where loja.cnpj_loja = l.tb004_cnpj_loja),           func.tb005_nome_completo    from varejo.tb005_funcionarios func             left join varejo.tb004_lojas l on func.tb004_cod_loja = l.tb004_cod_loja    where (select f.id           from warehouse.dim_funcionarios f           where f.cod_funcionario = func.tb005_matricula             and f.nome_completo = func.tb005_nome_completo             and f.cod_loja = (select loja.id                               from warehouse.dim_lojas loja                               where loja.cnpj_loja = l.tb004_cnpj_loja)) is null;END;$$ LANGUAGE plpgsql;create or replace function warehouse.insert_fato_vendas() returns void as$$BEGIN    insert into warehouse.fato_vendas (cod_produto, cod_funcionario, data, quantidade, valor)    select (select p.id            from warehouse.dim_produtos p                     left join varejo.tb012_produtos produtos on vendas.tb012_cod_produto = produtos.tb012_cod_produto                     left join varejo.tb013_categorias categorias                               on produtos.tb013_cod_categoria = categorias.tb013_cod_categoria            where p.descricao like produtos.tb012_descricao              and p.categoria like categorias.tb013_descricao),           (select func.id            from warehouse.dim_funcionarios func            where func.cod_funcionario = vendas.tb005_matricula            order by id desc            limit 1),           to_char(vendas.tb010_012_data, 'MM-YYYY'),           sum(vendas.tb010_012_quantidade),           (sum(vendas.tb010_012_quantidade) * sum(vendas.tb010_012_valor_unitario))    from varejo.tb010_012_vendas vendas             left join varejo.tb012_produtos produtos on vendas.tb012_cod_produto = produtos.tb012_cod_produto             left join varejo.tb013_categorias categorias                       on produtos.tb013_cod_categoria = categorias.tb013_cod_categoria    where (select v.data           from warehouse.fato_vendas v           where v.data like to_char(vendas.tb010_012_data, 'MM-YYYY')             and v.cod_funcionario = (select func.id                                      from warehouse.dim_funcionarios func                                      where func.cod_funcionario = vendas.tb005_matricula                                      order by id desc                                      limit 1)             and v.cod_produto = (select p.id                                  from warehouse.dim_produtos p                                           left join varejo.tb012_produtos produtos                                                     on vendas.tb012_cod_produto = produtos.tb012_cod_produto                                           left join varejo.tb013_categorias categorias                                                     on produtos.tb013_cod_categoria = categorias.tb013_cod_categoria                                  where p.descricao like produtos.tb012_descricao                                    and p.categoria like categorias.tb013_descricao                                  order by id desc                                  limit 1)           order by v.id desc           limit 1) is null    group by vendas.tb012_cod_produto, to_char(vendas.tb010_012_data, 'MM-YYYY'), vendas.tb005_matricula;END ;$$ LANGUAGE plpgsql;create or replace function warehouse.insert_fato_compras() returns void as$$BEGIN    insert into warehouse.fato_compras (cod_produto, cod_fornecedor, data, quantidade, valor)    select (select p.id            from warehouse.dim_produtos p                     left join varejo.tb012_produtos produtos on compras.tb012_cod_produto = produtos.tb012_cod_produto                     left join varejo.tb013_categorias categorias                               on produtos.tb013_cod_categoria = categorias.tb013_cod_categoria            where p.descricao like produtos.tb012_descricao              and p.categoria like categorias.tb013_descricao),           (select forn.id            from warehouse.dim_fornecedores forn            where forn.cod_fornecedor = compras.tb017_cod_fornecedor            order by id desc            limit 1),           to_char(compras.tb012_017_data, 'MM-YYYY'),           sum(compras.tb012_017_quantidade),           (sum(compras.tb012_017_quantidade) * sum(compras.tb012_017_valor_unitario))    from varejo.tb012_017_compras compras             left join varejo.tb012_produtos produtos on compras.tb012_cod_produto = produtos.tb012_cod_produto             left join varejo.tb013_categorias categorias                       on produtos.tb013_cod_categoria = categorias.tb013_cod_categoria    where (select v.data           from warehouse.fato_compras v           where v.data like to_char(compras.tb012_017_data, 'MM-YYYY')             and v.cod_fornecedor = (select forn.id                                     from warehouse.dim_fornecedores forn                                     where forn.cod_fornecedor = compras.tb017_cod_fornecedor                                     order by id desc                                     limit 1)             and v.cod_produto = (select p.id                                  from warehouse.dim_produtos p                                           left join varejo.tb012_produtos produtos                                                     on compras.tb012_cod_produto = produtos.tb012_cod_produto                                           left join varejo.tb013_categorias categorias                                                     on produtos.tb013_cod_categoria = categorias.tb013_cod_categoria                                  where p.descricao like produtos.tb012_descricao                                    and p.categoria like categorias.tb013_descricao                                  order by id desc                                  limit 1)           order by v.id desc           limit 1) is null    group by compras.tb012_cod_produto, to_char(compras.tb012_017_data, 'MM-YYYY'), compras.tb017_cod_fornecedor;END ;$$ LANGUAGE plpgsql;/* Index */create index index_tb010_clientes_antigos on varejo.tb010_clientes_antigos(tb010_cpf);create index index_tb010_clientes on varejo.tb010_clientes(tb010_cpf);create index index_tb003_enderecos on varejo.tb003_enderecos(tb003_cod_endereco);create index index_tb017_fornecedores on varejo.tb017_fornecedores(tb017_cod_fornecedor);create index index_tb004_lojas on varejo.tb004_lojas(tb004_cod_loja);create index index_tb005_funcionarios on varejo.tb005_funcionarios(tb005_matricula);create index index_tb005_006_funcionarios_cargos on varejo.tb005_006_funcionarios_cargos(tb005_matricula);create index index_tb006_cargos on varejo.tb006_cargos(tb006_cod_cargo);create index index_tb012_produtos on varejo.tb012_produtos(tb012_cod_produto);create index index_tb013_categorias on varejo.tb013_categorias(tb013_cod_categoria);create index index_tb016_prd_vestuarios on varejo.tb016_prd_vestuarios(tb016_cod_prd_vestuario);create index index_tb015_prd_eletros on varejo.tb015_prd_eletros(tb015_cod_prd_eletro);create index index_tb014_prd_alimentos on varejo.tb014_prd_alimentos(tb014_cod_prd_alimentos);create index index_tb010_012_vendas on varejo.tb010_012_vendas(tb010_012_cod_venda);create index index_tb012_017_compras on varejo.tb012_017_compras(tb012_017_cod_compra);create index index_tb002_cidades on varejo.tb002_cidades(tb002_cod_cidade);create index index_tb001_uf on varejo.tb001_uf(tb001_sigla_uf);create index index_tb011_logins on varejo.tb011_logins(tb011_logins);/* Pergunta gerencial:    > Fato Compras: Qual a quantidade total de vendas efetuada por de cada funcionário para cada mês. */-- Warehouseselect v.cod_funcionario as "Código do Funcionário",       f.nome_completo   as "Nome Completo",       v.data            as "Mês/Ano",       sum(v.quantidade) as "Vendas"from warehouse.fato_vendas v         left join warehouse.dim_funcionarios f on f.id = v.cod_funcionariogroup by v.cod_funcionario, f.nome_completo, v.dataorder by v.data, v.cod_funcionario;-- Varejoselect v.tb005_matricula                    as "Código do Funcionário",       f.tb005_nome_completo                as "Nome Completo",       to_char(v.tb010_012_data, 'MM-YYYY') as "Mês/Ano",       sum(v.tb010_012_quantidade)          as "Vendas"from varejo.tb010_012_vendas v         left join varejo.tb005_funcionarios f on v.tb005_matricula = f.tb005_matriculagroup by v.tb005_matricula, f.tb005_nome_completo, to_char(v.tb010_012_data, 'MM-YYYY')order by to_char(v.tb010_012_data, 'MM-YYYY'), v.tb005_matricula;